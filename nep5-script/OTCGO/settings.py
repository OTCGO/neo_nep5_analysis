#coding:utf8
"""
Django settings for oTCGO project.

Generated by 'django-admin startproject' using Django 1.10.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '**************************************************'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
TESTNET = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',#commit this line when runserver
    'rest_framework',
    'rest_framework_swagger',
    'wallet',
    'core',
]

REST_FRAMEWORK = {
    'PAGINATE_BY': 10,
    'PAGINATE_BY_PARAM': 'page_size',
    'MAX_PAGINATE_BY': 20,
    'DEFAULT_PERMISSION_CLASSES':[
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
}
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH':False,
    'JSON_EDITOR':False,
    'DOC_EXPANSION':'list',
}

MIDDLEWARE = [
    #'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    #'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'django.contrib.messages.middleware.MessageMiddleware',
    #'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'core.disable.DisableCSRF',
    #'django.middleware.cache.CacheMiddleware',
]

ROOT_URLCONF = 'OTCGO.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'OTCGO.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR,'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'TESTNET' if TESTNET else 'MAINNET',
        'USER': os.environ.get("OTCGO_USER"),
        'PASSWORD':os.environ.get("OTCGO_PASSWORD"),
        'HOST': os.environ.get("OTCGO_HOST"),
        'PORT': os.environ.get("OTCGO_PORT"),
        'OPTIONS': {
            'init_command':"SET sql_mode='STRICT_TRANS_TABLES'"
        }
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': os.environ.get("MemcachedCache"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'zh-CN'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_DIR = (
        STATIC_ROOT,
        )

##I defined
###agent
AGENT_XY_PUBKEY = '04956593708a81bc6b64e66b1ba10a24eace9273f7a2945c746e604da2969a9f9f249f868f6842d57daca1c966477288a02176cf66462757998dffa4b414a16d76'
AGENT_PUBKEY = '02956593708a81bc6b64e66b1ba10a24eace9273f7a2945c746e604da2969a9f9f'
AGENT_PRIKEY = '****************************************************************'

#APPHASH
APPHASH = '8a4d2865d01ec8e6add72e3dfdd20c12f44834e3' if TESTNET else '8a4d2865d01ec8e6add72e3dfdd20c12f44834e3'
RPC_NODE = os.environ.get("RPC_NODE_01") if TESTNET else os.environ.get("RPC_NODE_02")
RPC_NODE2 = 'http://seed2.antshares.org:20332' if TESTNET else 'http://seed2.antshares.org:10332'

#PAY config
from decimal import Decimal as D
NEED_RMB = True if TESTNET else False
RMB_ASSET = '2dbd5d6be093f6bdd7e59d1faedfd2656422aaf749719903e8dab412b4349e81'
ANC_ASSET = '602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7'
ANS_ASSET = 'c56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b'
RECHARGE_LIMIT = D(100)
RECHARGE_FEE_RATE = D('0')      #充值手续费：0
WITHDRAW_FEE_RATE = D('0.002')  #提现手续费：0.2%
WITHDRAW_FEE_LIMIT = D(5)          #提现最低手续费：5RMB
WITHDRAW_FEE_FIRST = None       #支持作为提现手续费的第一种资产
WITHDRAW_FEE_SECOND = None      #支持作为提现手续费的第二种资产
WITHDRAW_ADDRESS = 'AUkVH4k8gPowAEpvQVAmNEkriX96CrKzk9'

#Browser
BROWSER = os.environ.get("BROWSER")
BROWSER_PORT = 8888

#For ICO
MAX_ICO_BUYER = 5 #ICO承兑时，单笔承兑多少参与者



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }, # 针对 DEBUG = True 的情况
    },
    'formatters': {
        'standard': {
            'format': '%(levelname)s %(asctime)s %(pathname)s %(filename)s %(module)s %(funcName)s %(lineno)d: %(message)s'
        }, # 对日志信息进行格式化，每个字段对应了日志格式中的一个字段，更多字段参考官网文档，我认为这些字段比较合适，输出类似于下面的内容
        # INFO 2016-09-03 16:25:20,067 /home/ubuntu/mysite/views.py views.py views get 29: some info...
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
             'formatter':'standard'
        },
        'file_handler': {
             'level': 'DEBUG',
             'class': 'logging.handlers.TimedRotatingFileHandler',
             'filename': BASE_DIR+'admin.log',
             'formatter':'standard'
        }, # 用于文件输出
        'console':{
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'django': {
            'handlers' :['console'],
            'level':'DEBUG',
            'propagate': True # 是否继承父类的log信息
        }, # handlers 来自于上面的 handlers 定义的内容
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
    }
}